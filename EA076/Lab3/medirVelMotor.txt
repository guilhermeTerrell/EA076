#define pinEncoder 2
int velocidadeEstimada = 0;
int counter = 0;
int passagemDaPa = 0;

void configuracao_Timer0(){
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // Configuracao Temporizador 0 (8 bits) para gerar interrupcoes periodicas a cada 8ms no modo Clear Timer on Compare Match (CTC)
  // Relogio = 16e6 Hz
  // Prescaler = 1024
  // Faixa = 125 (contagem de 0 a OCR0A = 124)
  // Intervalo entre interrupcoes: (Prescaler/Relogio)*Faixa = (64/16e6)*(124+1) = 0.008s
  
  // TCCR0A – Timer/Counter Control Register A
  // COM0A1 COM0A0 COM0B1 COM0B0 – – WGM01 WGM00
  // 0      0      0      0          1     0
  TCCR0A = 0x02;

  // OCR0A – Output Compare Register A
  OCR0A = 124;

  // TIMSK0 – Timer/Counter Interrupt Mask Register
  // – – – – – OCIE0B OCIE0A TOIE0
  // – – – – – 0      1      0
  TIMSK0 = 0x02;
  
  // TCCR0B – Timer/Counter Control Register B
  // FOC0A FOC0B – – WGM02 CS02 CS01 CS0
  // 0     0         0     1    0    1
  TCCR0B = 0x05;
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////
}

// Rotina de servico de interrupcao do temporizador0
ISR(TIMER0_COMPA_vect){
  // Insira aqui o codigo a s do temporizadorer executado pela interrupcao periodica
  counter++;
  //Serial.println(counter);
}

void estimaVelocidade(){
  passagemDaPa++;
}

void setup(){
  Serial.begin(9600);
  pinMode(pinEncoder, INPUT);
  cli();
  configuracao_Timer0();
  sei();
}

void loop(){
  if(counter < 25){
    attachInterrupt(digitalPinToInterrupt(pinEncoder), estimaVelocidade, RISING);
  }
  /*counter = 125 -> 1s*/
  /*counter = 25 -> 0.2s*/
  /*Durante 0.2s segundo incremento passagemDaPa*/
  /*passageDaPa indica o número de voltas foram dadas em 0.2s*/
  /*Multiplicar por 5 para estimar a rotação em 1s*/
  if(counter == 25){
    velocidadeEstimada = 5*passagemDaPa;
    counter = 0;
    passagemDaPa = 0;
    Serial.println(velocidadeEstimada);
  }
}